import os
import json
import subprocess

def check_vulnerabilities(ip):
    """Perform a full vulnerability assessment on the router firmware."""
    report_file = f"vulnerability_report_{ip}.json"
    results = {
        "ip": ip,
        "open_ports": [],
        "weak_credentials": [],
        "misconfigurations": [],
        "firmware_vulnerabilities": []
    }
    
    # Step 1: Scan for open ports
    print(f"[INFO] Scanning open ports on {ip}...")
    open_ports = scan_ports(ip)
    results["open_ports"].extend(open_ports)
    
    # Step 2: Brute-force attack for weak credentials
    print(f"[INFO] Performing brute-force attack on {ip}...")
    brute_force_results = bruteforce_attack(ip)
    results["weak_credentials"].extend(brute_force_results)
    
    # Step 3: Check for misconfigurations
    print(f"[INFO] Checking for misconfigurations on {ip}...")
    misconfigurations = check_misconfigurations(ip)
    results["misconfigurations"].extend(misconfigurations)
    
    # Step 4: Firmware vulnerability analysis
    print(f"[INFO] Analyzing firmware vulnerabilities for {ip}...")
    firmware_issues = analyze_firmware(ip)
    results["firmware_vulnerabilities"].extend(firmware_issues)
    
    # Save the assessment report
    with open(report_file, "w") as file:
        json.dump(results, file, indent=4)
    
    print(f"[INFO] Vulnerability assessment report saved to {report_file}")

def scan_ports(ip):
    """Scan for open ports using nmap."""
    open_ports = []
    try:
        result = subprocess.run(["nmap", "-p", "22,23,80,443,8080,8888", "--open", ip], capture_output=True, text=True)
        for line in result.stdout.split("\n"):
            if "/tcp open" in line:
                port = line.split("/")[0]
                open_ports.append(int(port))
    except Exception as e:
        print(f"[ERROR] Port scan failed: {e}")
    return open_ports

def bruteforce_attack(ip):
    """Run brute-force attack using known credentials."""
    credentials = []
    try:
        result = subprocess.run(["python3", "Bruteforce.py", ip], capture_output=True, text=True)
        credentials = json.loads(result.stdout)
    except Exception as e:
        print(f"[ERROR] Bruteforce attack failed: {e}")
    return credentials

def check_misconfigurations(ip):
    """Check for common misconfigurations in router settings."""
    issues = []
    # Example checks (extend as needed)
    if "admin:admin" in bruteforce_attack(ip):
        issues.append("Default credentials still active")
    return issues

def analyze_firmware(ip):
    """Analyze firmware vulnerabilities by checking known CVEs."""
    vulnerabilities = []
    try:
        result = subprocess.run(["python3", "FirmwareScanner.py", ip], capture_output=True, text=True)
        vulnerabilities = json.loads(result.stdout)
    except Exception as e:
        print(f"[ERROR] Firmware analysis failed: {e}")
    return vulnerabilities

if __name__ == "__main__":
    target_ip = input("Enter target router IP: ")
    check_vulnerabilities(target_ip)
